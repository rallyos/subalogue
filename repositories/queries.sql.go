// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package db

import (
	"context"
)

const createSubscriptions = `-- name: CreateSubscriptions :one
INSERT INTO subscriptions (
    name, price
) VALUES (
    $1, $2
)
RETURNING id, name, price
`

type CreateSubscriptionsParams struct {
	Name  string
	Price int32
}

func (q *Queries) CreateSubscriptions(ctx context.Context, arg CreateSubscriptionsParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscriptions, arg.Name, arg.Price)
	var i Subscription
	err := row.Scan(&i.ID, &i.Name, &i.Price)
	return i, err
}

const deleteSubscriptions = `-- name: DeleteSubscriptions :exec
DELETE FROM subscriptions WHERE id = $1
`

func (q *Queries) DeleteSubscriptions(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSubscriptions, id)
	return err
}

const listSubscriptions = `-- name: ListSubscriptions :many
SELECT id, name, price FROM subscriptions
`

func (q *Queries) ListSubscriptions(ctx context.Context) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, listSubscriptions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(&i.ID, &i.Name, &i.Price); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSubscriptions = `-- name: UpdateSubscriptions :exec
UPDATE subscriptions
SET name = $1, price = $2
WHERE id = $3
`

type UpdateSubscriptionsParams struct {
	Name  string
	Price int32
	ID    int32
}

func (q *Queries) UpdateSubscriptions(ctx context.Context, arg UpdateSubscriptionsParams) error {
	_, err := q.db.ExecContext(ctx, updateSubscriptions, arg.Name, arg.Price, arg.ID)
	return err
}
